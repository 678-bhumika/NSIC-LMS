datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}

model Profile {
  id String @id @default(uuid()) @map("_id")
  userId String @unique
  name String
  imageUrl String?  
  email String  

  role MemberRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category{
  id String @id @default(uuid()) @map("_id")
  name String @unique
  courses Course[]
  createdAt DateTime?   @default(now())
  updatedAt DateTime ?  @updatedAt
  
}



model Attachment {
  id String @id @default(uuid()) @map("_id")
  name String
  url String

  courseId String 
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(courseId)

}
model Course {
  id String @id @default(uuid()) @map("_id")
  userId String
  title String 
  description String? 
  imageUrl String?
  price Float?
  isPublished Boolean @default(false)
  @@unique([id, userId])

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  purchases Purchase[]

  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])

}

model Chapter{
  id String @id @default(uuid()) @map("_id")
  title String
  description String? 
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String 
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(courseId)

}
model MuxData{
  id String @id @default(uuid()) @map("_id")
  chapterId String @unique 
  assetId String
  playbackId String?

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model UserProgress{
  id String @id @default(uuid()) @map("_id")
  userId String
  chapterId String 

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id          String     @id @default(uuid()) @map("_id")
  userId      String

  courseId    String     
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id                String     @id @default(uuid()) @map("_id")
  userId            String     @unique
  stripeCustomerId String     @unique

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Logging {
  id        String   @id @default(uuid()) @map("_id")
  url       String
  method    String
  body      String?
  response  String?
  statusCode Int?
  errorMessage String?
  createdAt DateTime @default(now())
}
